---
AWSTemplateFormatVersion: '2010-09-09'
Description: Network Layer Template

#------------------------------------------------------------------------------
Parameters:
#------------------------------------------------------------------------------
  SystemName:
    Description: This value is used as the resource prefix.
    Type: String
    MinLength: 1
    Default: example
  Env:
    Description: Environment Name
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prd
  VpcCidr:
    Description: First and Second Octet of VPC, For example (10.0/172.16/192.168)
    Type: String
    Default: 10.0
    AllowedPattern: "^(10\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|172\\.(1[6-9]|2[0-9]|3[0-1])|192\\.168)$"
    ConstraintDescription: xxx.xxx
  EnableNatGateway:
    Description: Enable NAT Gateway.
    Type: String
    Default: false
    AllowedValues: [true, false]

#------------------------------------------------------------------------------
Conditions:
#------------------------------------------------------------------------------
  EnableNatGateway:
    !Equals [true, !Ref EnableNatGateway]

#------------------------------------------------------------------------------
Mappings:
#------------------------------------------------------------------------------
  VpcConfig:
    dev:
      Vpc                : .0.0/16
      FrontendSubnet1    : .0.0/24
      FrontendSubnet2    : .1.0/24
      ApplicationSubnet1 : .10.0/24
      ApplicationSubnet2 : .11.0/24
      DatastoreSubnet1   : .20.0/24
      DatastoreSubnet2   : .21.0/24

#------------------------------------------------------------------------------
Resources:
#------------------------------------------------------------------------------

  #------------------------------------------------------------------------------
  Vpc:
  #------------------------------------------------------------------------------
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub [ "${VpcCidr}${Subnet}", { Subnet: !FindInMap [ VpcConfig, !Ref Env, Vpc ]}]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Env}-vpc

  #------------------------------------------------------------------------------
  InternetGateway:
  #------------------------------------------------------------------------------
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Env}-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  #------------------------------------------------------------------------------
  FrontendRouteTable:
  #------------------------------------------------------------------------------
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Env}-frontend-rtb

  FrontendRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref FrontendRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway


  #------------------------------------------------------------------------------
  ApplicationRouteTable1:
  #------------------------------------------------------------------------------
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Env}-application1-rtb

  ApplicationRoute1:
    Type: AWS::EC2::Route
    Condition: EnableNatGateway
    Properties:
      RouteTableId: !Ref ApplicationRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  #------------------------------------------------------------------------------
  ApplicationRouteTable2:
  #------------------------------------------------------------------------------
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Env}-application2-rtb

  ApplicationRoute2:
    Type: AWS::EC2::Route
    Condition: EnableNatGateway
    Properties:
      RouteTableId: !Ref ApplicationRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  #------------------------------------------------------------------------------
  DataStoreRouteTable:
  #------------------------------------------------------------------------------
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Env}-datastore-rtb

  #------------------------------------------------------------------------------
  NetworkACL:
  #------------------------------------------------------------------------------
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Env}-nacl
      VpcId: !Ref Vpc

  NetworkACLEntryEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref NetworkACL
      Protocol: -1
      RuleAction : allow
      RuleNumber : 100

  NetworkACLEntryIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref NetworkACL
      Protocol: -1
      RuleAction : allow
      RuleNumber : 100

  #------------------------------------------------------------------------------
  FrontendSubnet1:
  #------------------------------------------------------------------------------
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Sub [ "${VpcCidr}${Subnet}", { Subnet: !FindInMap [ VpcConfig, !Ref Env, FrontendSubnet1 ]}]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Env}-frontend1-subnet
      VpcId: !Ref Vpc

  FrontendSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FrontendSubnet1
      RouteTableId: !Ref FrontendRouteTable

  FrontendSubnet1NACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref FrontendSubnet1
      NetworkAclId: !Ref NetworkACL

  #------------------------------------------------------------------------------
  FrontendSubnet2:
  #------------------------------------------------------------------------------
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Sub [ "${VpcCidr}${Subnet}", { Subnet: !FindInMap [ VpcConfig, !Ref Env, FrontendSubnet2 ]}]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Env}-frontend2-subnet
      VpcId: !Ref Vpc

  FrontendSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FrontendSubnet2
      RouteTableId: !Ref FrontendRouteTable

  FrontendSubnet2NACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref FrontendSubnet2
      NetworkAclId: !Ref NetworkACL

  #------------------------------------------------------------------------------
  ApplicationSubnet1:
  #------------------------------------------------------------------------------
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Sub [ "${VpcCidr}${Subnet}", { Subnet: !FindInMap [ VpcConfig, !Ref Env, ApplicationSubnet1 ]}]
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Env}-application1-subnet
      VpcId: !Ref Vpc

  ApplicationSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ApplicationSubnet1
      RouteTableId: !Ref ApplicationRouteTable1

  ApplicationSubnet1NACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref ApplicationSubnet1
      NetworkAclId: !Ref NetworkACL

  #------------------------------------------------------------------------------
  ApplicationSubnet2:
  #------------------------------------------------------------------------------
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Sub [ "${VpcCidr}${Subnet}", { Subnet: !FindInMap [ VpcConfig, !Ref Env, ApplicationSubnet2 ]}]
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Env}-application2-subnet
      VpcId: !Ref Vpc

  ApplicationSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ApplicationSubnet2
      RouteTableId: !Ref ApplicationRouteTable2

  ApplicationSubnet2NACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref ApplicationSubnet2
      NetworkAclId: !Ref NetworkACL

  #------------------------------------------------------------------------------
  DatastoreSubnet1:
  #------------------------------------------------------------------------------
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Sub [ "${VpcCidr}${Subnet}", { Subnet: !FindInMap [ VpcConfig, !Ref Env, DatastoreSubnet1 ]}]
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Env}-datastore1-subnet
      VpcId: !Ref Vpc

  DatastoreSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DatastoreSubnet1
      RouteTableId: !Ref DataStoreRouteTable

  DatastoreSubnet1NACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref DatastoreSubnet1
      NetworkAclId: !Ref NetworkACL


  #------------------------------------------------------------------------------
  DatastoreSubnet2:
  #------------------------------------------------------------------------------
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Sub [ "${VpcCidr}${Subnet}", { Subnet: !FindInMap [ VpcConfig, !Ref Env, DatastoreSubnet2 ]}]
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Env}-datastore2-subnet
      VpcId: !Ref Vpc

  DatastoreSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DatastoreSubnet2
      RouteTableId: !Ref DataStoreRouteTable

  DatastoreSubnet2NACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref DatastoreSubnet2
      NetworkAclId: !Ref NetworkACL

  #------------------------------------------------------------------------------
  RDSSecurityGroup:
  #------------------------------------------------------------------------------
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref Vpc
      GroupName: !Sub "${SystemName}-${Env}-sg"
      GroupDescription: "-"
      Tags:
        - Key: "Name"
          Value: !Sub ${SystemName}-${Env}-sg"
# Rule
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0


  #------------------------------------------------------------------------------
  NatGateway1:
  #------------------------------------------------------------------------------
    Type: AWS::EC2::NatGateway
    Condition: EnableNatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP1.AllocationId
      SubnetId: !Ref FrontendSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Env}-ngw1

  NatGatewayEIP1:
    Type: AWS::EC2::EIP
    Condition: EnableNatGateway
    Properties:
      Domain: vpc


  #------------------------------------------------------------------------------
  NatGateway2:
  #------------------------------------------------------------------------------
    Type: AWS::EC2::NatGateway
    Condition: EnableNatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP2.AllocationId
      SubnetId: !Ref FrontendSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Env}-ngw2

  NatGatewayEIP2:
    Type: AWS::EC2::EIP
    Condition: EnableNatGateway
    Properties:
      Domain: vpc

  #------------------------------------------------------------------------------
  s3Endpoint:
  #------------------------------------------------------------------------------
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      RouteTableIds:
        - Ref: DataStoreRouteTable
      ServiceName:
        'Fn::Sub': 'com.amazonaws.${AWS::Region}.s3'
      VpcId:
        Ref: Vpc

  #------------------------------------------------------------------------------
  dynamodbEndpoint:
  #------------------------------------------------------------------------------
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 'dynamodb:*'
            Resource:
              - '*'
      RouteTableIds:
        - Ref: DataStoreRouteTable
      ServiceName:
        'Fn::Sub': 'com.amazonaws.${AWS::Region}.dynamodb'
      VpcId:
        Ref: Vpc

  #------------------------------------------------------------------------------
  snsEndpoint:
  #------------------------------------------------------------------------------
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName:
        'Fn::Sub': 'com.amazonaws.${AWS::Region}.sns'
      SubnetIds:
        - !Ref DatastoreSubnet1
        - !Ref DatastoreSubnet2
      VpcId:
        Ref: Vpc
      VpcEndpointType: Interface
      SecurityGroupIds:
        - !GetAtt [RDSSecurityGroup, GroupId]
      PrivateDnsEnabled: true

  #------------------------------------------------------------------------------
  SubnetMasterDBParam:
  #------------------------------------------------------------------------------
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /rds_demo/subnet_master_db
      Type: String
      Value: !Ref DatastoreSubnet1

  #------------------------------------------------------------------------------
  SubnetReplicaDBParam:
  #------------------------------------------------------------------------------
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /rds_demo/subnet_replica_db
      Type: String
      Value: !Ref DatastoreSubnet2

  #------------------------------------------------------------------------------
  RDSSecurityGroupParam:
  #------------------------------------------------------------------------------
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /rds_demo/rds_security_group
      Type: String
      Value: !GetAtt [RDSSecurityGroup, GroupId]

#------------------------------------------------------------------------------
Outputs:
#------------------------------------------------------------------------------
  Vpc:
    Value: !Ref Vpc
    Export:
      Name: !Sub ${SystemName}-${Env}-vpc
  FrontendSubnet1:
    Value: !Ref FrontendSubnet1
    Export:
      Name: !Sub ${SystemName}-${Env}-frontend1-subnet
  FrontendSubnet2:
    Value: !Ref FrontendSubnet2
    Export:
      Name: !Sub ${SystemName}-${Env}-frontend2-subnet
  ApplicationSubnet1:
    Value: !Ref ApplicationSubnet1
    Export:
      Name: !Sub ${SystemName}-${Env}-application1-subnet
  ApplicationSubnet2:
    Value: !Ref ApplicationSubnet2
    Export:
      Name: !Sub ${SystemName}-${Env}-application2-subnet
  DatastoreSubnet1:
    Value: !Ref DatastoreSubnet1
    Export:
      Name: !Sub ${SystemName}-${Env}-datastore1-subnet
  DatastoreSubnet2:
    Value: !Ref DatastoreSubnet2
    Export:
      Name: !Sub ${SystemName}-${Env}-datastore2-subnet
  RDSSecurityGroup:
    Value: !GetAtt [RDSSecurityGroup, GroupId]
    Export:
      Name: !Sub ${SystemName}-${Env}-rds-securitygroup